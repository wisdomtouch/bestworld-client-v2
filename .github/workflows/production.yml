name: Production

on:
  push:
    branches:
      - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  STATE: production
  DOCKER_REGISTRY_NAME: ketube-admin
  AZURE_APP_SERVICE_NAME: ketube-prod-admin

jobs:
  build_and_push:
    name: Build & Push
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Build image
        run: |
          rm -f ./.dockerignore
          DOCKER_BUILDKIT=1 docker build --platform linux/amd64 -t ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/${{ env.DOCKER_REGISTRY_NAME }}:${{ env.STATE }} -f ./docker/${{ env.STATE }}/Dockerfile .

      - name: Login via Azure CLI
        uses: azure/login@v2.1.0
        with:
          creds: ${{ secrets.AZURE_WISDOM_COMPANY_CREDENTIALS }}

      - name: Login to Azure ACR
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Delete images from a repository with a given tag
        run: |
          az acr repository delete -n ${{ secrets.AZURE_REGISTRY_NAME }} --image ${{ env.DOCKER_REGISTRY_NAME }}:${{ env.STATE }} --yes
        continue-on-error: true

      - name: Push image
        run: docker push ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/${{ env.DOCKER_REGISTRY_NAME }}:${{ env.STATE }}

      - name: Azure logout
        run: az logout

  disable_website:
    name: Disable the website
    runs-on:
      group: Self-Hosted
    needs: [ build_and_push ]
    environment: Cloudflare
    steps:
      - name: Get the status of token
        id: token
        run: |
          response=$( curl -s --request GET \
          --url https://api.cloudflare.com/client/v4/user/tokens/verify \
          --header 'Authorization: Bearer ${{ secrets.CF_TOKEN_KEY }}' );
          status=$( echo $response | jq -r '.result.status // empty' ) && echo "status=$status" >> $GITHUB_OUTPUT;
          errMsg=$( echo $response | jq -r '.errors[0].message // empty' ) && echo "errMsg=$errMsg" >> $GITHUB_OUTPUT;

      - name: Verify the token
        run: |
          [[ ${{ steps.token.outputs.status }} == "active" ]] && echo "Token is valid and active." || ( echo "${{ steps.token.outputs.errMsg }}" && exit 1 );

      - name: Enable the route
        id: route
        run: |
          response=$( curl -s --request PUT \
          --url https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_KETUBE_ZONE_ID }}/workers/routes/${{ secrets.CF_KETUBE_ROUTE_ADMIN_ID }} \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ secrets.CF_TOKEN_KEY }}' \
          --data '{ "pattern": "${{ vars.CF_KETUBE_ADMIN_URL_PATTERN }}", "script": "${{ vars.CF_KETUBE_SCRIPT }}" }' ); 
          success=$( echo $response | jq -r '.success // empty' ) && echo "success=$success" >> $GITHUB_OUTPUT;
          errMsg=$( echo $response | jq -r '.errors[0].message // empty' ) && echo "errMsg=$errMsg" >> $GITHUB_OUTPUT;

      - name: Verify the route that enable
        run: |
          [[ ${{ steps.route.outputs.success }} == "true" ]] && echo "The route already activated." || ( echo "${{ steps.route.outputs.errMsg }}" && exit 1 );

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ disable_website ]
    steps:
      - name: Login via Azure CLI
        uses: azure/login@v2.1.0
        with:
          creds: ${{ secrets.AZURE_KETUBE_CREDENTIALS }}

      - name: Deploy to an 'App Service' container
        uses: azure/webapps-deploy@v3.0.1
        with:
          app-name: ${{ env.AZURE_APP_SERVICE_NAME }}
          images: ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/${{ env.DOCKER_REGISTRY_NAME }}:${{ env.STATE }}
          clean: true
          restart: true

      - name: Azure logout
        run: az logout

  enable_website:
    name: Enable the website
    runs-on:
      group: Self-Hosted
    needs: [ deploy ]
    environment: Cloudflare
    steps:
      - name: Get the status of token
        id: token
        run: |
          response=$( curl -s --request GET \
          --url https://api.cloudflare.com/client/v4/user/tokens/verify \
          --header 'Authorization: Bearer ${{ secrets.CF_TOKEN_KEY }}' );
          status=$( echo $response | jq -r '.result.status // empty' ) && echo "status=$status" >> $GITHUB_OUTPUT;
          errMsg=$( echo $response | jq -r '.errors[0].message // empty' ) && echo "errMsg=$errMsg" >> $GITHUB_OUTPUT;

      - name: Verify the token
        run: |
          [[ ${{ steps.token.outputs.status }} == "active" ]] && echo "Token is valid and active." || ( echo "${{ steps.token.outputs.errMsg }}" && exit 1 );

      - name: Waiting for the application to be initialed
        run: sleep 40;

      - name: Disable the route
        id: route
        run: |
          response=$( curl -s --request PUT \
          --url https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_KETUBE_ZONE_ID }}/workers/routes/${{ secrets.CF_KETUBE_ROUTE_ADMIN_ID }} \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ secrets.CF_TOKEN_KEY }}' \
          --data '{ "pattern": "${{ vars.CF_KETUBE_ADMIN_URL_PATTERN }}", "script": null }' ); 
          success=$( echo $response | jq -r '.success // empty' ) && echo "success=$success" >> $GITHUB_OUTPUT;
          errMsg=$( echo $response | jq -r '.errors[0].message // empty' ) && echo "errMsg=$errMsg" >> $GITHUB_OUTPUT;

      - name: Verify the route that disable
        run: |
          [[ ${{ steps.route.outputs.success }} == "true" ]] && echo "The route has been disabled." || ( echo "${{ steps.route.outputs.errMsg }}" && exit 1 );